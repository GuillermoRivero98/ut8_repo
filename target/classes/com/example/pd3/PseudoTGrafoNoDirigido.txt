Escribe un seudocódigo de alto nivel sobre las estructuras definidas.

// Definición de la clase para el grafo no dirigido
public class TGrafoNoDirigido extends TGrafoDirigido implements IGrafoRedElectrica {

    protected TAristas lasAristas = new TAristas();

    // Constructor del grafo no dirigido
    public TGrafoNoDirigido(Collection<TVertice> vertices, Collection<TArista> aristas) {
        super(vertices, aristas);
        lasAristas.insertarAmbosSentidos(aristas); // Insertar aristas en ambos sentidos para grafo no dirigido
    }

    // Método para insertar una arista en el grafo no dirigido
    @Override
    public boolean insertarArista(TArista arista) {
        boolean tempbool = false;
        TArista arInv = new TArista(arista.getEtiquetaDestino(), arista.getEtiquetaOrigen(), arista.getCosto());
        tempbool = (super.insertarArista(arista) && super.insertarArista(arInv)); // Insertar arista y su inversa
        return tempbool;
    }

    // Método para obtener todas las aristas del grafo
    public TAristas getLasAristas() {
        return lasAristas;
    }

    // Método para encontrar el MST que optimiza la red eléctrica (implementación depende del algoritmo elegido)
    @Override
    public TAristas mejorRedElectrica() {
        // Implementación del algoritmo para encontrar el MST (Prim o Kruskal)
        // Devolver el conjunto de aristas del MST
        throw new UnsupportedOperationException("Not supported yet."); 
    }
}


Tiempo de ejecucion: 

1. Kruskal: Tiene un tiempo de ejecución de 0(ElogV)
    V= nro de vertices
    E=nro de aristas

2. Prim: Tiene un tiempo de ejecucion de 0(V**2)